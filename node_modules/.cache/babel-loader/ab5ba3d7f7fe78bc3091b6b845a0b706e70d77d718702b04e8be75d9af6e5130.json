{"ast":null,"code":"class AIService {\n  constructor() {\n    this.mockTestCases = [{\n      id: '1',\n      title: 'Unit Tests for User Authentication',\n      description: 'Comprehensive unit tests for user login, registration, and authentication flow',\n      framework: 'Jest',\n      files: ['auth.js', 'user.js'],\n      estimatedTime: '2-3 hours',\n      complexity: 'Medium'\n    }, {\n      id: '2',\n      title: 'API Integration Tests',\n      description: 'End-to-end API testing for REST endpoints with proper error handling',\n      framework: 'Supertest',\n      files: ['api.js', 'routes.js'],\n      estimatedTime: '1-2 hours',\n      complexity: 'Low'\n    }, {\n      id: '3',\n      title: 'Component Testing for React',\n      description: 'React component testing with user interactions and state management',\n      framework: 'React Testing Library',\n      files: ['components/Button.jsx', 'components/Form.jsx'],\n      estimatedTime: '3-4 hours',\n      complexity: 'High'\n    }, {\n      id: '4',\n      title: 'Database Integration Tests',\n      description: 'Database connection and query testing with proper cleanup',\n      framework: 'Jest + SQLite',\n      files: ['database.js', 'models.js'],\n      estimatedTime: '2-3 hours',\n      complexity: 'Medium'\n    }, {\n      id: '5',\n      title: 'Selenium Web Automation',\n      description: 'Browser automation tests for web application functionality',\n      framework: 'Selenium WebDriver',\n      files: ['pages/HomePage.js', 'pages/LoginPage.js'],\n      estimatedTime: '4-5 hours',\n      complexity: 'High'\n    }];\n  }\n  async generateTestCaseSummaries(files) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Generate test cases based on file types and content\n    const testCases = [];\n    for (const file of files) {\n      const fileName = file.name.toLowerCase();\n\n      // JavaScript/TypeScript files\n      if (fileName.endsWith('.js') || fileName.endsWith('.ts') || fileName.endsWith('.jsx') || fileName.endsWith('.tsx')) {\n        if (fileName.includes('calculator') || fileName.includes('math') || fileName.includes('calc')) {\n          testCases.push({\n            id: `calc-${Date.now()}`,\n            title: 'Calculator Function Unit Tests',\n            description: 'Comprehensive unit tests for mathematical functions including edge cases and error handling',\n            framework: 'Jest',\n            files: [file.name],\n            estimatedTime: '2-3 hours',\n            complexity: 'Medium'\n          });\n        } else if (fileName.includes('user') || fileName.includes('profile') || fileName.includes('form')) {\n          testCases.push({\n            id: `react-${Date.now()}`,\n            title: 'React Component Tests',\n            description: 'Component testing with user interactions, form validation, and state management',\n            framework: 'React Testing Library',\n            files: [file.name],\n            estimatedTime: '3-4 hours',\n            complexity: 'High'\n          });\n        } else {\n          testCases.push({\n            id: `js-${Date.now()}`,\n            title: 'JavaScript Unit Tests',\n            description: 'Unit tests for JavaScript functions and modules',\n            framework: 'Jest',\n            files: [file.name],\n            estimatedTime: '1-2 hours',\n            complexity: 'Low'\n          });\n        }\n      }\n\n      // Python files\n      else if (fileName.endsWith('.py')) {\n        if (fileName.includes('data') || fileName.includes('process') || fileName.includes('analysis')) {\n          testCases.push({\n            id: `python-data-${Date.now()}`,\n            title: 'Python Data Processing Tests',\n            description: 'Unit tests for data processing, validation, and analysis functions',\n            framework: 'pytest',\n            files: [file.name],\n            estimatedTime: '2-3 hours',\n            complexity: 'Medium'\n          });\n        } else {\n          testCases.push({\n            id: `python-${Date.now()}`,\n            title: 'Python Unit Tests',\n            description: 'Comprehensive unit tests for Python functions and classes',\n            framework: 'pytest',\n            files: [file.name],\n            estimatedTime: '1-2 hours',\n            complexity: 'Low'\n          });\n        }\n      }\n\n      // API/Backend files\n      else if (fileName.includes('api') || fileName.includes('route') || fileName.includes('controller')) {\n        testCases.push({\n          id: `api-${Date.now()}`,\n          title: 'API Integration Tests',\n          description: 'End-to-end API testing for REST endpoints with proper error handling',\n          framework: 'Supertest',\n          files: [file.name],\n          estimatedTime: '1-2 hours',\n          complexity: 'Low'\n        });\n      }\n\n      // Web automation files\n      else if (fileName.includes('page') || fileName.includes('e2e') || fileName.includes('selenium')) {\n        testCases.push({\n          id: `selenium-${Date.now()}`,\n          title: 'Selenium Web Automation',\n          description: 'Browser automation tests for web application functionality',\n          framework: 'Selenium WebDriver',\n          files: [file.name],\n          estimatedTime: '4-5 hours',\n          complexity: 'High'\n        });\n      }\n    }\n\n    // If no specific test cases found, provide generic ones\n    if (testCases.length === 0) {\n      testCases.push({\n        id: `generic-${Date.now()}`,\n        title: 'Generic Unit Tests',\n        description: 'Basic unit tests for the selected files',\n        framework: 'Jest',\n        files: files.map(f => f.name),\n        estimatedTime: '1-2 hours',\n        complexity: 'Low'\n      });\n    }\n    return testCases;\n  }\n  async generateTestCaseCode(summary, files) {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    const mockCode = this.getMockCode(summary.framework, summary.title);\n    return {\n      id: summary.id,\n      code: mockCode,\n      framework: summary.framework,\n      fileName: this.generateFileName(summary.title, summary.framework),\n      dependencies: this.getDependencies(summary.framework)\n    };\n  }\n  getMockCode(framework, title) {\n    const codeTemplates = {\n      'Jest': `import { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport { AuthProvider } from '../src/contexts/AuthContext';\n\ndescribe('${title}', () => {\n  beforeEach(() => {\n    render(\n      <AuthProvider>\n        <div>Test Component</div>\n      </AuthProvider>\n    );\n  });\n\n  test('should render authentication form', () => {\n    expect(screen.getByText('Test Component')).toBeInTheDocument();\n  });\n\n  test('should handle user login', async () => {\n    const loginButton = screen.getByRole('button', { name: /login/i });\n    fireEvent.click(loginButton);\n    \n    await screen.findByText('Login successful');\n    expect(screen.getByText('Login successful')).toBeInTheDocument();\n  });\n\n  test('should handle authentication errors', async () => {\n    const errorButton = screen.getByRole('button', { name: /error/i });\n    fireEvent.click(errorButton);\n    \n    await screen.findByText('Authentication failed');\n    expect(screen.getByText('Authentication failed')).toBeInTheDocument();\n  });\n});`,\n      'Supertest': `const request = require('supertest');\nconst app = require('../src/app');\nconst mongoose = require('mongoose');\n\ndescribe('${title}', () => {\n  beforeAll(async () => {\n    await mongoose.connect(process.env.MONGODB_TEST_URI);\n  });\n\n  afterAll(async () => {\n    await mongoose.connection.close();\n  });\n\n  beforeEach(async () => {\n    await mongoose.connection.dropDatabase();\n  });\n\n  describe('GET /api/users', () => {\n    it('should return list of users', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .expect(200);\n\n      expect(response.body).toBeInstanceOf(Array);\n      expect(response.body.length).toBeGreaterThanOrEqual(0);\n    });\n\n    it('should handle authentication errors', async () => {\n      const response = await request(app)\n        .get('/api/users')\n        .set('Authorization', 'Bearer invalid-token')\n        .expect(401);\n\n      expect(response.body.error).toBe('Unauthorized');\n    });\n  });\n\n  describe('POST /api/users', () => {\n    it('should create a new user', async () => {\n      const userData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      const response = await request(app)\n        .post('/api/users')\n        .send(userData)\n        .expect(201);\n\n      expect(response.body.name).toBe(userData.name);\n      expect(response.body.email).toBe(userData.email);\n    });\n  });\n});`,\n      'React Testing Library': `import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport '@testing-library/jest-dom';\nimport Button from '../src/components/Button';\nimport Form from '../src/components/Form';\n\ndescribe('${title}', () => {\n  describe('Button Component', () => {\n    test('renders button with correct text', () => {\n      render(<Button>Click me</Button>);\n      expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();\n    });\n\n    test('calls onClick handler when clicked', () => {\n      const handleClick = jest.fn();\n      render(<Button onClick={handleClick}>Click me</Button>);\n      \n      fireEvent.click(screen.getByRole('button'));\n      expect(handleClick).toHaveBeenCalledTimes(1);\n    });\n\n    test('applies disabled state correctly', () => {\n      render(<Button disabled>Click me</Button>);\n      expect(screen.getByRole('button')).toBeDisabled();\n    });\n  });\n\n  describe('Form Component', () => {\n    test('submits form with correct data', async () => {\n      const handleSubmit = jest.fn();\n      const user = userEvent.setup();\n\n      render(<Form onSubmit={handleSubmit} />);\n      \n      await user.type(screen.getByLabelText(/email/i), 'test@example.com');\n      await user.type(screen.getByLabelText(/password/i), 'password123');\n      await user.click(screen.getByRole('button', { name: /submit/i }));\n\n      await waitFor(() => {\n        expect(handleSubmit).toHaveBeenCalledWith({\n          email: 'test@example.com',\n          password: 'password123'\n        });\n      });\n    });\n  });\n});`,\n      'Selenium WebDriver': `from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.chrome.options import Options\nimport unittest\n\nclass ${title.replace(/\\s+/g, '')}Test(unittest.TestCase):\n    def setUp(self):\n        chrome_options = Options()\n        chrome_options.add_argument(\"--headless\")\n        chrome_options.add_argument(\"--no-sandbox\")\n        chrome_options.add_argument(\"--disable-dev-shm-usage\")\n        \n        self.driver = webdriver.Chrome(options=chrome_options)\n        self.driver.implicitly_wait(10)\n        self.wait = WebDriverWait(self.driver, 10)\n\n    def tearDown(self):\n        self.driver.quit()\n\n    def test_homepage_loads(self):\n        \"\"\"Test that homepage loads correctly\"\"\"\n        self.driver.get(\"http://localhost:3000\")\n        \n        # Check if page title is correct\n        self.assertIn(\"Test App\", self.driver.title)\n        \n        # Check if main content is present\n        main_content = self.wait.until(\n            EC.presence_of_element_located((By.TAG_NAME, \"main\"))\n        )\n        self.assertTrue(main_content.is_displayed())\n\n    def test_user_login(self):\n        \"\"\"Test user login functionality\"\"\"\n        self.driver.get(\"http://localhost:3000/login\")\n        \n        # Find and fill login form\n        email_input = self.wait.until(\n            EC.presence_of_element_located((By.NAME, \"email\"))\n        )\n        password_input = self.driver.find_element(By.NAME, \"password\")\n        \n        email_input.send_keys(\"test@example.com\")\n        password_input.send_keys(\"password123\")\n        \n        # Submit form\n        submit_button = self.driver.find_element(By.XPATH, \"//button[@type='submit']\")\n        submit_button.click()\n        \n        # Check if redirected to dashboard\n        self.wait.until(\n            EC.url_contains(\"/dashboard\")\n        )\n        \n        # Verify user is logged in\n        welcome_message = self.wait.until(\n            EC.presence_of_element_located((By.CLASS_NAME, \"welcome-message\"))\n        )\n        self.assertIn(\"Welcome\", welcome_message.text)\n\nif __name__ == \"__main__\":\n    unittest.main()`\n    };\n    return codeTemplates[framework] || codeTemplates['Jest'];\n  }\n  generateFileName(title, framework) {\n    const cleanTitle = title.replace(/[^a-zA-Z0-9]/g, '');\n    const extensions = {\n      'Jest': '.test.js',\n      'Supertest': '.test.js',\n      'React Testing Library': '.test.jsx',\n      'Selenium WebDriver': '.py'\n    };\n    return `${cleanTitle}${extensions[framework] || '.test.js'}`;\n  }\n  getDependencies(framework) {\n    const dependencies = {\n      'Jest': ['@testing-library/react', '@testing-library/jest-dom', '@testing-library/user-event'],\n      'Supertest': ['supertest', 'jest'],\n      'React Testing Library': ['@testing-library/react', '@testing-library/jest-dom', '@testing-library/user-event'],\n      'Selenium WebDriver': ['selenium', 'webdriver-manager']\n    };\n    return dependencies[framework] || [];\n  }\n}\nexport default AIService;","map":{"version":3,"names":["AIService","constructor","mockTestCases","id","title","description","framework","files","estimatedTime","complexity","generateTestCaseSummaries","Promise","resolve","setTimeout","testCases","file","fileName","name","toLowerCase","endsWith","includes","push","Date","now","length","map","f","generateTestCaseCode","summary","mockCode","getMockCode","code","generateFileName","dependencies","getDependencies","codeTemplates","replace","cleanTitle","extensions"],"sources":["C:/Users/sharm/OneDrive/Desktop/workik_AI/src/services/aiService.ts"],"sourcesContent":["import { TestCaseSummary, TestCaseCode, GitHubFile } from '../types';\r\n\r\nclass AIService {\r\n  private mockTestCases = [\r\n    {\r\n      id: '1',\r\n      title: 'Unit Tests for User Authentication',\r\n      description: 'Comprehensive unit tests for user login, registration, and authentication flow',\r\n      framework: 'Jest',\r\n      files: ['auth.js', 'user.js'],\r\n      estimatedTime: '2-3 hours',\r\n      complexity: 'Medium' as const,\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'API Integration Tests',\r\n      description: 'End-to-end API testing for REST endpoints with proper error handling',\r\n      framework: 'Supertest',\r\n      files: ['api.js', 'routes.js'],\r\n      estimatedTime: '1-2 hours',\r\n      complexity: 'Low' as const,\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Component Testing for React',\r\n      description: 'React component testing with user interactions and state management',\r\n      framework: 'React Testing Library',\r\n      files: ['components/Button.jsx', 'components/Form.jsx'],\r\n      estimatedTime: '3-4 hours',\r\n      complexity: 'High' as const,\r\n    },\r\n    {\r\n      id: '4',\r\n      title: 'Database Integration Tests',\r\n      description: 'Database connection and query testing with proper cleanup',\r\n      framework: 'Jest + SQLite',\r\n      files: ['database.js', 'models.js'],\r\n      estimatedTime: '2-3 hours',\r\n      complexity: 'Medium' as const,\r\n    },\r\n    {\r\n      id: '5',\r\n      title: 'Selenium Web Automation',\r\n      description: 'Browser automation tests for web application functionality',\r\n      framework: 'Selenium WebDriver',\r\n      files: ['pages/HomePage.js', 'pages/LoginPage.js'],\r\n      estimatedTime: '4-5 hours',\r\n      complexity: 'High' as const,\r\n    },\r\n  ];\r\n\r\n  async generateTestCaseSummaries(files: GitHubFile[]): Promise<TestCaseSummary[]> {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n    \r\n    // Generate test cases based on file types and content\r\n    const testCases: TestCaseSummary[] = [];\r\n    \r\n    for (const file of files) {\r\n      const fileName = file.name.toLowerCase();\r\n      \r\n      // JavaScript/TypeScript files\r\n      if (fileName.endsWith('.js') || fileName.endsWith('.ts') || fileName.endsWith('.jsx') || fileName.endsWith('.tsx')) {\r\n        if (fileName.includes('calculator') || fileName.includes('math') || fileName.includes('calc')) {\r\n          testCases.push({\r\n            id: `calc-${Date.now()}`,\r\n            title: 'Calculator Function Unit Tests',\r\n            description: 'Comprehensive unit tests for mathematical functions including edge cases and error handling',\r\n            framework: 'Jest',\r\n            files: [file.name],\r\n            estimatedTime: '2-3 hours',\r\n            complexity: 'Medium' as const,\r\n          });\r\n        } else if (fileName.includes('user') || fileName.includes('profile') || fileName.includes('form')) {\r\n          testCases.push({\r\n            id: `react-${Date.now()}`,\r\n            title: 'React Component Tests',\r\n            description: 'Component testing with user interactions, form validation, and state management',\r\n            framework: 'React Testing Library',\r\n            files: [file.name],\r\n            estimatedTime: '3-4 hours',\r\n            complexity: 'High' as const,\r\n          });\r\n        } else {\r\n          testCases.push({\r\n            id: `js-${Date.now()}`,\r\n            title: 'JavaScript Unit Tests',\r\n            description: 'Unit tests for JavaScript functions and modules',\r\n            framework: 'Jest',\r\n            files: [file.name],\r\n            estimatedTime: '1-2 hours',\r\n            complexity: 'Low' as const,\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Python files\r\n      else if (fileName.endsWith('.py')) {\r\n        if (fileName.includes('data') || fileName.includes('process') || fileName.includes('analysis')) {\r\n          testCases.push({\r\n            id: `python-data-${Date.now()}`,\r\n            title: 'Python Data Processing Tests',\r\n            description: 'Unit tests for data processing, validation, and analysis functions',\r\n            framework: 'pytest',\r\n            files: [file.name],\r\n            estimatedTime: '2-3 hours',\r\n            complexity: 'Medium' as const,\r\n          });\r\n        } else {\r\n          testCases.push({\r\n            id: `python-${Date.now()}`,\r\n            title: 'Python Unit Tests',\r\n            description: 'Comprehensive unit tests for Python functions and classes',\r\n            framework: 'pytest',\r\n            files: [file.name],\r\n            estimatedTime: '1-2 hours',\r\n            complexity: 'Low' as const,\r\n          });\r\n        }\r\n      }\r\n      \r\n      // API/Backend files\r\n      else if (fileName.includes('api') || fileName.includes('route') || fileName.includes('controller')) {\r\n        testCases.push({\r\n          id: `api-${Date.now()}`,\r\n          title: 'API Integration Tests',\r\n          description: 'End-to-end API testing for REST endpoints with proper error handling',\r\n          framework: 'Supertest',\r\n          files: [file.name],\r\n          estimatedTime: '1-2 hours',\r\n          complexity: 'Low' as const,\r\n        });\r\n      }\r\n      \r\n      // Web automation files\r\n      else if (fileName.includes('page') || fileName.includes('e2e') || fileName.includes('selenium')) {\r\n        testCases.push({\r\n          id: `selenium-${Date.now()}`,\r\n          title: 'Selenium Web Automation',\r\n          description: 'Browser automation tests for web application functionality',\r\n          framework: 'Selenium WebDriver',\r\n          files: [file.name],\r\n          estimatedTime: '4-5 hours',\r\n          complexity: 'High' as const,\r\n        });\r\n      }\r\n    }\r\n    \r\n    // If no specific test cases found, provide generic ones\r\n    if (testCases.length === 0) {\r\n      testCases.push({\r\n        id: `generic-${Date.now()}`,\r\n        title: 'Generic Unit Tests',\r\n        description: 'Basic unit tests for the selected files',\r\n        framework: 'Jest',\r\n        files: files.map(f => f.name),\r\n        estimatedTime: '1-2 hours',\r\n        complexity: 'Low' as const,\r\n      });\r\n    }\r\n    \r\n    return testCases;\r\n  }\r\n\r\n  async generateTestCaseCode(summary: TestCaseSummary, files: GitHubFile[]): Promise<TestCaseCode> {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 3000));\r\n\r\n    const mockCode = this.getMockCode(summary.framework, summary.title);\r\n    \r\n    return {\r\n      id: summary.id,\r\n      code: mockCode,\r\n      framework: summary.framework,\r\n      fileName: this.generateFileName(summary.title, summary.framework),\r\n      dependencies: this.getDependencies(summary.framework),\r\n    };\r\n  }\r\n\r\n  private getMockCode(framework: string, title: string): string {\r\n    const codeTemplates: { [key: string]: string } = {\r\n      'Jest': `import { render, screen, fireEvent } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport { AuthProvider } from '../src/contexts/AuthContext';\r\n\r\ndescribe('${title}', () => {\r\n  beforeEach(() => {\r\n    render(\r\n      <AuthProvider>\r\n        <div>Test Component</div>\r\n      </AuthProvider>\r\n    );\r\n  });\r\n\r\n  test('should render authentication form', () => {\r\n    expect(screen.getByText('Test Component')).toBeInTheDocument();\r\n  });\r\n\r\n  test('should handle user login', async () => {\r\n    const loginButton = screen.getByRole('button', { name: /login/i });\r\n    fireEvent.click(loginButton);\r\n    \r\n    await screen.findByText('Login successful');\r\n    expect(screen.getByText('Login successful')).toBeInTheDocument();\r\n  });\r\n\r\n  test('should handle authentication errors', async () => {\r\n    const errorButton = screen.getByRole('button', { name: /error/i });\r\n    fireEvent.click(errorButton);\r\n    \r\n    await screen.findByText('Authentication failed');\r\n    expect(screen.getByText('Authentication failed')).toBeInTheDocument();\r\n  });\r\n});`,\r\n\r\n      'Supertest': `const request = require('supertest');\r\nconst app = require('../src/app');\r\nconst mongoose = require('mongoose');\r\n\r\ndescribe('${title}', () => {\r\n  beforeAll(async () => {\r\n    await mongoose.connect(process.env.MONGODB_TEST_URI);\r\n  });\r\n\r\n  afterAll(async () => {\r\n    await mongoose.connection.close();\r\n  });\r\n\r\n  beforeEach(async () => {\r\n    await mongoose.connection.dropDatabase();\r\n  });\r\n\r\n  describe('GET /api/users', () => {\r\n    it('should return list of users', async () => {\r\n      const response = await request(app)\r\n        .get('/api/users')\r\n        .expect(200);\r\n\r\n      expect(response.body).toBeInstanceOf(Array);\r\n      expect(response.body.length).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should handle authentication errors', async () => {\r\n      const response = await request(app)\r\n        .get('/api/users')\r\n        .set('Authorization', 'Bearer invalid-token')\r\n        .expect(401);\r\n\r\n      expect(response.body.error).toBe('Unauthorized');\r\n    });\r\n  });\r\n\r\n  describe('POST /api/users', () => {\r\n    it('should create a new user', async () => {\r\n      const userData = {\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        password: 'password123'\r\n      };\r\n\r\n      const response = await request(app)\r\n        .post('/api/users')\r\n        .send(userData)\r\n        .expect(201);\r\n\r\n      expect(response.body.name).toBe(userData.name);\r\n      expect(response.body.email).toBe(userData.email);\r\n    });\r\n  });\r\n});`,\r\n\r\n      'React Testing Library': `import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport '@testing-library/jest-dom';\r\nimport Button from '../src/components/Button';\r\nimport Form from '../src/components/Form';\r\n\r\ndescribe('${title}', () => {\r\n  describe('Button Component', () => {\r\n    test('renders button with correct text', () => {\r\n      render(<Button>Click me</Button>);\r\n      expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();\r\n    });\r\n\r\n    test('calls onClick handler when clicked', () => {\r\n      const handleClick = jest.fn();\r\n      render(<Button onClick={handleClick}>Click me</Button>);\r\n      \r\n      fireEvent.click(screen.getByRole('button'));\r\n      expect(handleClick).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    test('applies disabled state correctly', () => {\r\n      render(<Button disabled>Click me</Button>);\r\n      expect(screen.getByRole('button')).toBeDisabled();\r\n    });\r\n  });\r\n\r\n  describe('Form Component', () => {\r\n    test('submits form with correct data', async () => {\r\n      const handleSubmit = jest.fn();\r\n      const user = userEvent.setup();\r\n\r\n      render(<Form onSubmit={handleSubmit} />);\r\n      \r\n      await user.type(screen.getByLabelText(/email/i), 'test@example.com');\r\n      await user.type(screen.getByLabelText(/password/i), 'password123');\r\n      await user.click(screen.getByRole('button', { name: /submit/i }));\r\n\r\n      await waitFor(() => {\r\n        expect(handleSubmit).toHaveBeenCalledWith({\r\n          email: 'test@example.com',\r\n          password: 'password123'\r\n        });\r\n      });\r\n    });\r\n  });\r\n});`,\r\n\r\n      'Selenium WebDriver': `from selenium import webdriver\r\nfrom selenium.webdriver.common.by import By\r\nfrom selenium.webdriver.support.ui import WebDriverWait\r\nfrom selenium.webdriver.support import expected_conditions as EC\r\nfrom selenium.webdriver.chrome.options import Options\r\nimport unittest\r\n\r\nclass ${title.replace(/\\s+/g, '')}Test(unittest.TestCase):\r\n    def setUp(self):\r\n        chrome_options = Options()\r\n        chrome_options.add_argument(\"--headless\")\r\n        chrome_options.add_argument(\"--no-sandbox\")\r\n        chrome_options.add_argument(\"--disable-dev-shm-usage\")\r\n        \r\n        self.driver = webdriver.Chrome(options=chrome_options)\r\n        self.driver.implicitly_wait(10)\r\n        self.wait = WebDriverWait(self.driver, 10)\r\n\r\n    def tearDown(self):\r\n        self.driver.quit()\r\n\r\n    def test_homepage_loads(self):\r\n        \"\"\"Test that homepage loads correctly\"\"\"\r\n        self.driver.get(\"http://localhost:3000\")\r\n        \r\n        # Check if page title is correct\r\n        self.assertIn(\"Test App\", self.driver.title)\r\n        \r\n        # Check if main content is present\r\n        main_content = self.wait.until(\r\n            EC.presence_of_element_located((By.TAG_NAME, \"main\"))\r\n        )\r\n        self.assertTrue(main_content.is_displayed())\r\n\r\n    def test_user_login(self):\r\n        \"\"\"Test user login functionality\"\"\"\r\n        self.driver.get(\"http://localhost:3000/login\")\r\n        \r\n        # Find and fill login form\r\n        email_input = self.wait.until(\r\n            EC.presence_of_element_located((By.NAME, \"email\"))\r\n        )\r\n        password_input = self.driver.find_element(By.NAME, \"password\")\r\n        \r\n        email_input.send_keys(\"test@example.com\")\r\n        password_input.send_keys(\"password123\")\r\n        \r\n        # Submit form\r\n        submit_button = self.driver.find_element(By.XPATH, \"//button[@type='submit']\")\r\n        submit_button.click()\r\n        \r\n        # Check if redirected to dashboard\r\n        self.wait.until(\r\n            EC.url_contains(\"/dashboard\")\r\n        )\r\n        \r\n        # Verify user is logged in\r\n        welcome_message = self.wait.until(\r\n            EC.presence_of_element_located((By.CLASS_NAME, \"welcome-message\"))\r\n        )\r\n        self.assertIn(\"Welcome\", welcome_message.text)\r\n\r\nif __name__ == \"__main__\":\r\n    unittest.main()`,\r\n    };\r\n\r\n    return codeTemplates[framework] || codeTemplates['Jest'];\r\n  }\r\n\r\n  private generateFileName(title: string, framework: string): string {\r\n    const cleanTitle = title.replace(/[^a-zA-Z0-9]/g, '');\r\n    const extensions: { [key: string]: string } = {\r\n      'Jest': '.test.js',\r\n      'Supertest': '.test.js',\r\n      'React Testing Library': '.test.jsx',\r\n      'Selenium WebDriver': '.py',\r\n    };\r\n    \r\n    return `${cleanTitle}${extensions[framework] || '.test.js'}`;\r\n  }\r\n\r\n  private getDependencies(framework: string): string[] {\r\n    const dependencies: { [key: string]: string[] } = {\r\n      'Jest': ['@testing-library/react', '@testing-library/jest-dom', '@testing-library/user-event'],\r\n      'Supertest': ['supertest', 'jest'],\r\n      'React Testing Library': ['@testing-library/react', '@testing-library/jest-dom', '@testing-library/user-event'],\r\n      'Selenium WebDriver': ['selenium', 'webdriver-manager'],\r\n    };\r\n    \r\n    return dependencies[framework] || [];\r\n  }\r\n}\r\n\r\nexport default AIService; "],"mappings":"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AWA,CAACxB,SAAiB,EAAEF,KAAa,EAAU;IAC5D,MAAM+B,aAAwC,GAAG;MAC/C,MAAM,EAAE;AACd;AACA;AACA;AACA,YAAY/B,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;MAEE,WAAW,EAAE;AACnB;AACA;AACA;AACA,YAAYA,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;MAEE,uBAAuB,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,YAAYA,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;MAEE,oBAAoB,EAAE;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,QAAQA,KAAK,CAACgC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC;IAED,OAAOD,aAAa,CAAC7B,SAAS,CAAC,IAAI6B,aAAa,CAAC,MAAM,CAAC;EAC1D;EAEQH,gBAAgBA,CAAC5B,KAAa,EAAEE,SAAiB,EAAU;IACjE,MAAM+B,UAAU,GAAGjC,KAAK,CAACgC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;IACrD,MAAME,UAAqC,GAAG;MAC5C,MAAM,EAAE,UAAU;MAClB,WAAW,EAAE,UAAU;MACvB,uBAAuB,EAAE,WAAW;MACpC,oBAAoB,EAAE;IACxB,CAAC;IAED,OAAO,GAAGD,UAAU,GAAGC,UAAU,CAAChC,SAAS,CAAC,IAAI,UAAU,EAAE;EAC9D;EAEQ4B,eAAeA,CAAC5B,SAAiB,EAAY;IACnD,MAAM2B,YAAyC,GAAG;MAChD,MAAM,EAAE,CAAC,wBAAwB,EAAE,2BAA2B,EAAE,6BAA6B,CAAC;MAC9F,WAAW,EAAE,CAAC,WAAW,EAAE,MAAM,CAAC;MAClC,uBAAuB,EAAE,CAAC,wBAAwB,EAAE,2BAA2B,EAAE,6BAA6B,CAAC;MAC/G,oBAAoB,EAAE,CAAC,UAAU,EAAE,mBAAmB;IACxD,CAAC;IAED,OAAOA,YAAY,CAAC3B,SAAS,CAAC,IAAI,EAAE;EACtC;AACF;AAEA,eAAeN,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}