{"ast":null,"code":"import { Octokit } from '@octokit/rest';\nclass GitHubService {\n  constructor(token) {\n    this.octokit = void 0;\n    this.octokit = new Octokit({\n      auth: token\n    });\n  }\n  async getRepositoryInfo(owner, repo) {\n    try {\n      const response = await this.octokit.repos.get({\n        owner,\n        repo\n      });\n      return {\n        name: response.data.name,\n        owner: response.data.owner.login,\n        description: response.data.description || '',\n        defaultBranch: response.data.default_branch,\n        language: response.data.language || 'Unknown'\n      };\n    } catch (error) {\n      console.error('Error fetching repository info:', error);\n      throw new Error('Failed to fetch repository information');\n    }\n  }\n  async getRepositoryFiles(owner, repo, path = '') {\n    try {\n      const response = await this.octokit.repos.getContent({\n        owner,\n        repo,\n        path\n      });\n      if (Array.isArray(response.data)) {\n        return response.data.map(item => ({\n          name: item.name,\n          path: item.path,\n          type: item.type,\n          size: item.size,\n          sha: item.sha,\n          url: item.url\n        }));\n      } else {\n        return [{\n          name: response.data.name,\n          path: response.data.path,\n          type: response.data.type,\n          size: response.data.size,\n          sha: response.data.sha,\n          url: response.data.url\n        }];\n      }\n    } catch (error) {\n      console.error('Error fetching repository files:', error);\n      throw new Error('Failed to fetch repository files');\n    }\n  }\n  async getFileContent(owner, repo, path) {\n    try {\n      const response = await this.octokit.repos.getContent({\n        owner,\n        repo,\n        path\n      });\n      if ('content' in response.data) {\n        return Buffer.from(response.data.content, 'base64').toString('utf-8');\n      }\n      throw new Error('File content not found');\n    } catch (error) {\n      console.error('Error fetching file content:', error);\n      throw new Error('Failed to fetch file content');\n    }\n  }\n  async createPullRequest(config, title, body, files) {\n    try {\n      const branchName = `test-case-${Date.now()}`;\n      const {\n        data: ref\n      } = await this.octokit.git.getRef({\n        owner: config.owner,\n        repo: config.repo,\n        ref: `heads/${config.branch}`\n      });\n      await this.octokit.git.createRef({\n        owner: config.owner,\n        repo: config.repo,\n        ref: `refs/heads/${branchName}`,\n        sha: ref.object.sha\n      });\n      for (const file of files) {\n        await this.octokit.repos.createOrUpdateFileContents({\n          owner: config.owner,\n          repo: config.repo,\n          path: file.path,\n          message: `Add test case: ${title}`,\n          content: Buffer.from(file.content).toString('base64'),\n          branch: branchName\n        });\n      }\n      const {\n        data: pr\n      } = await this.octokit.pulls.create({\n        owner: config.owner,\n        repo: config.repo,\n        title,\n        body,\n        head: branchName,\n        base: config.branch\n      });\n      return pr.html_url;\n    } catch (error) {\n      console.error('Error creating pull request:', error);\n      throw new Error('Failed to create pull request');\n    }\n  }\n}\nexport default GitHubService;","map":{"version":3,"names":["Octokit","GitHubService","constructor","token","octokit","auth","getRepositoryInfo","owner","repo","response","repos","get","name","data","login","description","defaultBranch","default_branch","language","error","console","Error","getRepositoryFiles","path","getContent","Array","isArray","map","item","type","size","sha","url","getFileContent","Buffer","from","content","toString","createPullRequest","config","title","body","files","branchName","Date","now","ref","git","getRef","branch","createRef","object","file","createOrUpdateFileContents","message","pr","pulls","create","head","base","html_url"],"sources":["C:/Users/sharm/OneDrive/Desktop/AI Based Test Case Generator/src/services/githubService.ts"],"sourcesContent":["import { Octokit } from '@octokit/rest';\r\nimport { GitHubFile, GitHubConfig, RepositoryInfo } from '../types';\r\n\r\nclass GitHubService {\r\n  private octokit: Octokit;\r\n\r\n  constructor(token: string) {\r\n    this.octokit = new Octokit({ auth: token });\r\n  }\r\n\r\n  async getRepositoryInfo(owner: string, repo: string): Promise<RepositoryInfo> {\r\n    try {\r\n      const response = await this.octokit.repos.get({ owner, repo });\r\n      return {\r\n        name: response.data.name,\r\n        owner: response.data.owner.login,\r\n        description: response.data.description || '',\r\n        defaultBranch: response.data.default_branch,\r\n        language: response.data.language || 'Unknown',\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching repository info:', error);\r\n      throw new Error('Failed to fetch repository information');\r\n    }\r\n  }\r\n\r\n  async getRepositoryFiles(owner: string, repo: string, path: string = ''): Promise<GitHubFile[]> {\r\n    try {\r\n      const response = await this.octokit.repos.getContent({ owner, repo, path });\r\n\r\n      if (Array.isArray(response.data)) {\r\n        return response.data.map((item: any) => ({\r\n          name: item.name,\r\n          path: item.path,\r\n          type: item.type,\r\n          size: item.size,\r\n          sha: item.sha,\r\n          url: item.url,\r\n        }));\r\n      } else {\r\n        return [{\r\n          name: response.data.name,\r\n          path: response.data.path,\r\n          type: response.data.type,\r\n          size: response.data.size,\r\n          sha: response.data.sha,\r\n          url: response.data.url,\r\n        }];\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching repository files:', error);\r\n      throw new Error('Failed to fetch repository files');\r\n    }\r\n  }\r\n\r\n  async getFileContent(owner: string, repo: string, path: string): Promise<string> {\r\n    try {\r\n      const response = await this.octokit.repos.getContent({ owner, repo, path });\r\n\r\n      if ('content' in response.data) {\r\n        return Buffer.from(response.data.content, 'base64').toString('utf-8');\r\n      }\r\n      throw new Error('File content not found');\r\n    } catch (error) {\r\n      console.error('Error fetching file content:', error);\r\n      throw new Error('Failed to fetch file content');\r\n    }\r\n  }\r\n\r\n  async createPullRequest(\r\n    config: GitHubConfig,\r\n    title: string,\r\n    body: string,\r\n    files: { path: string; content: string }[]\r\n  ): Promise<string> {\r\n    try {\r\n      const branchName = `test-case-${Date.now()}`;\r\n\r\n      const { data: ref } = await this.octokit.git.getRef({\r\n        owner: config.owner,\r\n        repo: config.repo,\r\n        ref: `heads/${config.branch}`,\r\n      });\r\n\r\n      await this.octokit.git.createRef({\r\n        owner: config.owner,\r\n        repo: config.repo,\r\n        ref: `refs/heads/${branchName}`,\r\n        sha: ref.object.sha,\r\n      });\r\n\r\n      for (const file of files) {\r\n        await this.octokit.repos.createOrUpdateFileContents({\r\n          owner: config.owner,\r\n          repo: config.repo,\r\n          path: file.path,\r\n          message: `Add test case: ${title}`,\r\n          content: Buffer.from(file.content).toString('base64'),\r\n          branch: branchName,\r\n        });\r\n      }\r\n\r\n      const { data: pr } = await this.octokit.pulls.create({\r\n        owner: config.owner,\r\n        repo: config.repo,\r\n        title,\r\n        body,\r\n        head: branchName,\r\n        base: config.branch,\r\n      });\r\n\r\n      return pr.html_url;\r\n    } catch (error) {\r\n      console.error('Error creating pull request:', error);\r\n      throw new Error('Failed to create pull request');\r\n    }\r\n  }\r\n}\r\n\r\nexport default GitHubService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}